#pragma once

#include "Vector.h"
#include "Color.h"
#include "Macro.h"

struct SDL_Window;
struct SDL_Renderer;

class Texture;
class Font;


/**
 * 게임 내의 렌더링을 위한 클래스입니다.
 */
class RenderSystem
{
public:
	/**
	 * 게임 내의 렌더링을 위한 클래스의 생성자입니다.
	 *
	 * @param InWindow - SDL 윈도우의 포인터입니다.
	 * @param bIsAccelerated - 하드웨어 가속여부입니다.
	 * @param bIsActiveVsync - 수직 동기화 활성화 여부입니다.
	 *
	 * @see https://wiki.libsdl.org/SDL_CreateRenderer
	 */
	explicit RenderSystem(SDL_Window* InWindow, bool bIsAccelerated, bool bIsActiveVsync);


	/**
	 * 게임 내의 렌더링을 위한 클래스의 가상 소멸자입니다.
	 */
	virtual ~RenderSystem();


	/**
	 * 복사 생성자와 대입 연산자를 명시적으로 삭제합니다.
	 */
	DISALLOW_COPY_AND_ASSIGN(RenderSystem);


	/**
	 * 프레임 렌더링을 시작합니다.
	 *
	 * @param InColor - 벡버퍼를 비울 색상입니다.
	 *
	 * @throws 백버퍼 초기화에 실패할 경우, C++ 표준 예외를 던집니다.
	 */
	void BeginFrame(const LinearColor& InColor);


	/**
	 * 프레임 렌더링을 종료하고, 벡버퍼를 화면에 표시합니다.
	 */
	void EndFrame();


	/**
	 * SDL 렌더러의 포인터를 얻습니다.
	 *
	 * @return SDL 렌더러의 포인터를 반환합니다.
	 */
	SDL_Renderer* GetRenderer() { return Renderer_; }


	/**
	 * 벡버퍼에 2D 점을 그립니다.
	 *
	 * @param InPosition - 점의 위치입니다.
	 * @param InColor - 점의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawPoint2D(const Vec2i& InPosition, const LinearColor& InColor);


	/**
	 * 벡버퍼에 2D 선을 그립니다.
	 *
	 * @param InPosition0 - 선분의 한 끝점입니다.
	 * @param InPosition1 - 선분의 다른 한 끝점입니다.
	 * @param InColor - 선분의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawLine2D(const Vec2i& InPosition0, const Vec2i& InPosition1, const LinearColor& InColor);


	/**
	 * 벡버퍼에 2D 사각형을 그립니다.
	 *
	 * @param InPosition0 - 사각형의 왼쪽 상단점입니다.
	 * @param InPosition1 - 사각형의 오른쪽 하단점입니다.
	 * @param InColor - 사각형의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawRect2D(const Vec2i& InPosition0, const Vec2i& InPosition1, const LinearColor& InColor);


	/**
	 * 벡버퍼에 2D 사각형을 그립니다.
	 *
	 * @param InCenterPosition - 사각형의 중심이 위치할 화면상의 좌표입니다.
	 * @param InWidth - 사각형의 가로 길이입니다.
	 * @param InHeight - 사각형의 세로 길이입니다.
	 * @param InColor - 사각형의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawRect2D(const Vec2i& InCenterPosition, int32_t InWidth, int32_t InHeight, const LinearColor& InColor);


	/**
	 * 벡버퍼에 채움 2D 사각형을 그립니다.
	 *
	 * @param InPosition0 - 채움 사각형의 왼쪽 상단점입니다.
	 * @param InPosition1 - 채움 사각형의 오른쪽 하단점입니다.
	 * @param InColor - 채움 사각형의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawFillRect2D(const Vec2i& InPosition0, const Vec2i& InPosition1, const LinearColor& InColor);


	/**
	 * 벡버퍼에 채움 2D 사각형을 그립니다.
	 *
	 * @param InCenterPosition - 사각형의 중심이 위치할 화면상의 좌표입니다.
	 * @param InWidth - 사각형의 가로 길이입니다.
	 * @param InHeight - 사각형의 세로 길이입니다
	 * @param InColor - 사각형의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawFillRect2D(const Vec2i& InCenterPosition, int32_t InWidth, int32_t InHeight, const LinearColor& InColor);


	/**
	 * 백버퍼에 텍스처를 그립니다.
	 * 이때, 회전 각도는 60분법 기준입니다.
	 *
	 * @param InTexture - 벡버퍼에 그릴 텍스처입니다.
	 * @param InPosition0 - 텍스처의 왼쪽 상단이 위치할 화면상의 좌표입니다.
	 * @param InPosition1 - 텍스처의 왼쪽 상단이 위치할 화면상의 좌표입니다.
	 * @param InRotateAngle - 렌더링할 텍스처의 회전 각도입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawTexture2D(Texture& InTexture, const Vec2i& InPosition0, const Vec2i& InPosition1, float InRotateAngle = 0.0f);


	/**
	 * 백버퍼에 텍스처를 그립니다.
	 * 이때, 회전 각도는 60분법 기준입니다.
	 *
	 * @param InTexture - 벡버퍼에 그릴 텍스처입니다.
	 * @param InCenterPosition - 텍스처의 중심이 위치할 화면상의 좌표입니다.
	 * @param InWidth- 백버퍼에 렌더링할 텍스처의 가로 크기 입니다
	 * @param InHeight- 백버퍼에 렌더링할 텍스처의 원본 텍스처 대비 세로 크기 비율입니다.
	 * @param InRotateAngle - 렌더링할 텍스처의 회전 각도입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawTexture2D(Texture& InTexture, const Vec2i& InCenterPosition, int32_t InWidth, int32_t InHeight, float InRotateAngle = 0.0f);


	/**
	 * 백버퍼에 텍스처 원본을 그립니다.
	 * 이때, 회전 각도는 60분법 기준입니다.
	 *
	 * @param InTexture - 벡버퍼에 그릴 텍스처입니다.
	 * @param InCenterPosition - 텍스처의 중심이 위치할 화면상의 좌표입니다.
	 * @param InRotateAngle - 렌더링할 텍스처의 회전 각도입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawTexture2D(Texture& InTexture, const Vec2i& InCenterPosition, float InRotateAngle = 0.0f);


	/**
	 * 벡버퍼에 텍스트를 그립니다.
	 *
	 * @param InFont- 트루 타입 폰트입니다.
	 * @param InText - 벡버퍼에 그릴 텍스트입니다.
	 * @param InCenterPosition - 텍스트의 중심이 위치할 화면상의 좌표입니다.
	 * @param InColor - 텍스트의 색상입니다.
	 *
	 * @throws 렌더링에 실패하면 C++ 표준 예외를 던집니다.
	 */
	void DrawText2D(Font& InFont, const std::wstring& InText, const Vec2i& InCenterPosition, const LinearColor& InColor);


private:
	/**
	 * SDL 렌더러의 컬러 상태를 설정합니다.
	 *
	 * @param InColor - 변경할 SDL 렌더러의 컬러 상태입니다.
	 *
	 * @throws 렌더 색상 설정에 실패할 경우, C++ 표준 예외를 던집니다.
	 */
	void SetDrawColor(const LinearColor& InColor);


	/**
	 * SDL 렌더러의 컬러 상태를 설정합니다.
	 *
	 * @param InRed - 변경할 SDL 렌더러의 컬러 Red값 입니다.
	 * @param InGreen - 변경할 SDL 렌더러의 컬러 Green값 입니다.
	 * @param InBlue - 변경할 SDL 렌더러의 컬러 Blue값 입니다.
	 * @param InAlpha - 변경할 SDL 렌더러의 컬러 Alpha값 입니다.
	 *
	 * @throws 렌더 색상 설정에 실패할 경우, C++ 표준 예외를 던집니다.
	 */
	void SetDrawColor(uint8_t InRed, uint8_t InGreen, uint8_t InBlue, uint8_t InAlpha);


private:
	/**
	 * SDL Renderer의 포인터입니다.
	 */
	SDL_Renderer* Renderer_ = nullptr;
};