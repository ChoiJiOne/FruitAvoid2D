#pragma once

#include "Macro.h"

#include <vector>
#include <string>

struct SDL_Renderer;
struct SDL_Texture;


/**
 * 텍스처 리소스를 관리하는 클래스입니다.
 */
class Texture
{
public:
	/**
	 * 텍스처 클래스의 생성자입니다.
	 * 
	 * @param InRenderer - 텍스처 리소스를 생성할 때 사용할 SDL 렌더러입니다.
	 * @param InPath - 로딩할 텍스처 리소스의 경로입니다.
	 * 
	 * @throws
	 * - 텍스처 파일 로딩에 실패하면 C++ 표준 예외를 던집니다.
	 * - 텍스처 리소스 생성에 실패하면 C++ 표준 예외를 던집니다.
	 */
	explicit Texture(SDL_Renderer* InRenderer, const std::string& InPath);


	/**
	 * 텍스처 클래스의 가상 소멸자입니다.
	 */
	virtual ~Texture();


	/**
	 * 복사 생성자와 대입 연산자를 명시적으로 삭제합니다.
	 */
	DISALLOW_COPY_AND_ASSIGN(Texture);


	/**
	 * SDL 텍스처 리소스의 포인터를 얻습니다.
	 * 
	 * @return SDL 텍스처 리소스의 포인터를 반환합니다.
	 */
	SDL_Texture* GetTextureResource() { return Texture_; }

	
private:
	/**
	 * 텍스처 파일을 로딩합니다.
	 * 
	 * @param InPath - 로딩할 텍스처 리소스의 경로입니다.
	 * @param OutBuffer - 텍스처 리소스의 버퍼 리소스입니다.
	 * @param OutFormat - 텍스처 리소스의 포멧입니다.
	 * @param OutWidth - 텍스처 리소스의 가로 크기입니다.
	 * @param OutHeight - 텍스처 리소스의 세로 크기입니다.
	 * 
	 * @return 텍스처 파일 로딩에 성공하면 true, 그렇지 않으면 false를 반환합니다.
	 */
	static bool LoadTextureFromFile(
		const std::string& InPath,
		std::vector<uint8_t>& OutBuffer,
		int32_t& OutFormat,
		int32_t& OutWidth,
		int32_t& OutHeight
	);


	/**
	 * 텍스처 리소스를 생성합니다.
	 * 
	 * @param InRenderer - 텍스처 리소스를 생성할 때 사용할 SDL 렌더러입니다.
	 * @param InBuffer - 텍스처 리소스의 버퍼입니다.
	 * @param InFormat - 텍스처 리소스의 포멧입니다.
	 * @param InWidth - 텍스처 리소스의 가로 크기입니다.
	 * @param InHeight - 텍스처 리소스의 세로 크기입니다.
	 * 
	 * @throws 텍스처 리소스 생성에 실패하면 C++ 표준 예외를 던집니다.
	 * 
	 * @return SDL 텍스처 리소스의 포인터를 반환합니다.
	 */
	static SDL_Texture* CreateTextureResource(
		SDL_Renderer* InRenderer,
		const std::vector<uint8_t>& InBuffer,
		const int32_t& InFormat,
		const int32_t& InWidth,
		const int32_t& InHeight
	);


private:
	/**
	 * SDL 텍스처 리소스입니다.
	 */
	SDL_Texture* Texture_ = nullptr;
};